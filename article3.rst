기초 3강. 변수
=============================

Hello World를 띄웠으니까 이제 좀 더 복잡한걸 해봅시다. 일단 계산부터 해보죠.
이번 강좌에서는

- EUDVariable에 대해 배워봅니다.
- 변수끼리 기본적인 사칙연산을 하는 법을 배워봅니다.




EUDVariable
------------

맵 만들때 데스값 많이 쓰지요? 안쓰셨을만한 분들도 있을까봐 대충 설명하자면

- 내가 **몇** 라이프인가?
- 지금 **몇** 스테이지를 하고 있는가?
- 내 마나가 **몇** 인가?

처럼 숫자를 다룰 필요가 있을때 데스값에다 그 숫자를 저장해놓죠. EUDVariable는
조금 더 확장된 데스값이라 보시면 됩니다. Variable이 한글로 '변수' 에요. 변수는 데스값처럼 값을 여러개 담을 수 있는
무언가라고 보시면 됩니다.



- 서로 대입이 됩니다.
- 서로 덧셈, 뺄셈, 곱셈, 나눗셈을 쉽게 할 수 있습니다.
- 조건이나 액션에도 숫자 대신 넣을 수 있습니다.
- 나중에 배우겠지만 함수에도 넣을 수 있습니다.

일단 쓰는법부터 배워봅시다. 간단한 예제입니다.

.. literalinclude:: examples/example21.py

.. note::
    DoActions는 조건이 Always고 액션만 있는 트리거를 만들때 씁니다.

먼저 Variable을 만들어야겠죠. 변수는 :code:`EUDVariable()` 로 만듭니다. ::

    var = EUDVariable()  # var라는 변수 하나를 만든다.

데스값과 다르게 EUDVariable은 무한정 만들 수 있으니까 유닛 갯수가 부족하다 같은
걱정은 안하셔도 되요. EUDVariable에 값 대입은 :code:`[변수] << [값]` 으로
합니다.  ::

    var << 15  # var에 15을 넣는다.
    var << (var * 30 + 25) // 4  # var에 (var * 30 + 25) // 4 를 넣는다.

여기 나온 :code:`(var * 30 + 25) // 4` 처럼 EUDVariable을 이용해서 사칙연산을
할 수 있습니다. *는 곱셈, //는 정수 나눗셈(나머지를 버리고 몫만 얻는다)이에요.
+랑 -는 다 아시죠?

EUDVariable이 어떤 값을 가지는지 알아보기 위해서 여기서는 :code:`SetResources`
액션을 썼습니다. 리소스는 모두에게 보이니까요. 스타로 맵을 부르면 이렇게
미네랄(Ore)이 15, 가스(Gas)가 118이 됩니다. 직접 저 수식을 따라 손으로 var를
계산해보세요.

.. image:: ar3_p1.png


.. note::
    나눗셈의 몫은 // 로 얻고, 나눗셈의 나머지는 % 로 얻을 수 있어요.
    0으로 나누더라도 딱히 스타가 팅긴다던가 하지는 않지만 0으로 나눠서 얻은
    몫이나 나머지는 다른데 쓰지 마세요.




＝, ≥, ≤, ≠, >, <
--------------------

==, >=, <=, !=, >, < 를 이용해서 EUDVariable랑 숫자를 비교하거나
EUDVariable끼리 비교할 수 있습니다. 간단한 예제를 살펴보겠습니다.

.. literalinclude:: examples/example22.py

예제니까 간단하게 하기 위해서 Current Player같은거 고려 안하고 그냥 P1전용으로
만들었어요. (2강 참고) 10 = 20, 10 ≥ 20, 10 < 20, 10 ≠ 20 중에서 <, ≠가
참이기 때문에 결과로 3, 4가 나옵니다.




+=, -=, *=, //=
---------------

a에 10을 더하려면 이렇게 하면 될겁니다. ::

    a << a + 10

그런데 조금 귀찮잖아요. 이렇게 줄여쓸수도 있습니다. ::

    a += 10

-=, *=, //=도 마찬가지에요.




<<랑 =의 차이
-------------

eudplib 코드에서는 :code:`<<` 랑 :code:`=`를 혼용해서 씁니다.

- :code:`=` : 새로 변수를 만들때
- :code:`<<` : 있던 변수에 값을 대입할때

    a = EUDVariable()  # a를 만듭니다.
    b = f_getuserplayerid()  # b를 만듭니다

    # a = f_getuserplayerid()  # X. 위에서 a를 만들었으니까 여기서는 <<를!
    a << f_getuserplayerid()  # O


:code:`<<` 대신 :code:`=` 를 써도 코드가 정상작동하는 경우가 가끔 있긴 하지만,
원칙적으로는 위 규칙대로 :code:`<<` 랑 :code:`=` 를 구분해서 써야합니다. 이
규칙을 제대로 안지키면 나중에 반복문같은거 배울때 트리거가 제대로 작동 안할수도
있어요.

.. note:: **[파이썬 관련]** :code:`<<` 랑 :code:`=` 를 구분하는 이유

    파이썬에서 =는 이름에 값을 대응시켜주지만, <<는 이거랑은 관련 없이 그냥
    EUDVariable이란 값에 수를 대입하는 연산자입니다. ::

        a = EUDVariable()  # EUDVariable(v1)를 만들고, a를 v1에 대응
        a << 20  # a에 대응되는 v1에 20이란 값을 대입

        b = a  # b를 a에 대응되는 v1에 대응
        # a랑 b가 같은 v1에 대응됨

        b << 30  # a랑 b가 같은 v1에 대응된다.
        # 그 v1에 30이란 값을 대입한다.
        # 그러니까 a랑 b 모두 값이 30인 변수에 대응되는 꼴이 된다.

    쉽게 말해서 :code:`<<` 랑 :code:`=` 를 무작정 같이 쓰면 화납니다.
    파이썬에서 변수의 개념이 C나 VB같은거랑은 다릅니다.
